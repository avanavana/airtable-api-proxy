/**
 *  @file Webhook Functions
 *  @author Avana Vana <dear.avana@gmail.com>
 *  @module webhooks
 */

const axios = require('axios');

const webhooks = new Map([
    ['discord',
        {
            instance: axios.create({
              baseURL: 'https://discord.com/api/webhooks',
              headers: {
                'Content-Type': 'application/json'
                }
            }),
            endpoints: {
                newSubmission: '857098588068642816/5E1e3f5mKhjfuHOQVdQNlyw5gHqlEb1yjapFXEjw55TLUAxK1UvCP7uu7Ke_5aXb9z4C'
            }
        }
    ]
]);

module.exports = {
  execute: async (payload, provider, action) => {
    try {
      
      const response = await webhooks.get(provider).instance.post(webhooks.get(provider).endpoints[action], { 
        content: () => {
          switch (provider + action) {
            case 'discordNewSubmission':
              return payload.length === 1 ? `New submission:` : `${payload.length} new submissions:` + '\n\n' + payload.map((item) => `'${item.title}' (${item.date}) [${item.runningTime}]${/Topic:\s(.*)\n?/.test(item.extras) ? '\nAdded in: ' + item.extras.match(/Topic:\s(.*)\n?/)[1] : null}\nWatch at: ${item.url} \nView in ESOVDB: ${item.archiveLocation} `).join('\n\n');
            default:
              throw new Error('[ERROR] No provider or action given.');
          }
        }
      });
      
      if (response.status >= 200) { console.log(`â€º [payload.length] new ESOVDB submission${payload.length === 1 ? '' : 's'} posted to Discord.`); }
      else { throw new Error('[ERROR] Could not post submissions to discord.') }
    } catch (err) {
      console.error(err.message);
    } 
  }
}